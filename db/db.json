{
  "posts": [
    {
      "id": 1,
      "name": "variables",
      "title": "Variables",
      "description": "Sass uses the $ symbol to make something a variable",
      "category": "learn"
    },
    {
      "id": 2,
      "name": "nesting",
      "title": "Nesting",
      "description": "This is a great way to organize your CSS and make it more readable",
      "category": "learn"
    },
    {
      "id": 3,
      "name": "partials",
      "title": "Partials",
      "description": "This is a great way to modularize your CSS and help keep things easier to maintain",
      "category": "learn"
    },
    {
      "id": 4,
      "name": "modules",
      "title": "Modules",
      "description": "You don’t have to write all your Sass in a single file",
      "category": "learn"
    },
    {
      "id": 5,
      "name": "mixins",
      "title": "Mixins",
      "description": "A mixin lets you make groups of CSS declarations that you want to reuse throughout your site",
      "category": "learn"
    },
    {
      "id": 6,
      "name": "extend",
      "title": "Extend",
      "description": "Using @extend lets you share a set of CSS properties from one selector to another",
      "category": "learn"
    },
    {
      "id": 7,
      "name": "operators",
      "title": "Operators",
      "description": "Sass has a handful of standard math operators like +, -, *, math.div(), and %",
      "category": "learn"
    },
    {
      "id": 8,
      "name": "syntax",
      "title": "Syntax",
      "description": "Sass supports two different syntaxes. Each one can load the other, so it’s up to you and your team which one to choose",
      "category": "doc"
    },
    {
      "id": 9,
      "name": "parsing-stylesheet",
      "title": "Parsing a Stylesheet",
      "description": "A Sass stylesheet is parsed from a sequence of Unicode code points. It’s parsed directly, without first being converted to a token stream",
      "category": "doc"
    },
    {
      "id": 10,
      "name": "structure-stylesheet",
      "title": "Structure of a Stylesheet",
      "description": "Just like CSS, most Sass stylesheets are mainly made up of style rules that contain property declarations. But Sass stylesheets have many more features that can exist alongside these",
      "category": "doc"
    },
    {
      "id": 11,
      "name": "comments",
      "title": "Comments",
      "description": "Comments defined using /* */ that are (usually) compiled to CSS, and comments defined using // that are not",
      "category": "doc"
    },
    {
      "id": 12,
      "name": "special-functions",
      "title": "Special Functions",
      "description": "CSS defines many functions, and most of them work just fine with Sass’s normal function syntax",
      "category": "doc"
    },
    {
      "id": 13,
      "name": "style-rules",
      "title": "Style Rules",
      "description": "Style rules are the foundation of Sass, just like they are for CSS. And they work the same way: you choose which elements to style with a selector, and declare properties that affect how those elements look",
      "category": "doc"
    },
    {
      "id": 14,
      "name": "property-declarations",
      "title": "Property Declarations",
      "description": "Property declarations define how elements that match a selector are styled. But Sass adds extra features to make them easier to write and to automate",
      "category": "doc"
    },
    {
      "id": 15,
      "name": "parent-selector",
      "title": "Parent Selector",
      "description": "The parent selector, &, is a special selector invented by Sass that’s used in nested selectors to refer to the outer selector",
      "category": "doc"
    },
    {
      "id": 16,
      "name": "placeholder-selectors",
      "title": "Placeholder Selectors",
      "description": "Sass has a special kind of selector known as a “placeholder”. It looks and acts a lot like a class selector, but it starts with a % and it’s not included in the CSS output",
      "category": "doc"
    },
    {
      "id": 17,
      "name": "variables",
      "title": "Variable",
      "description": "Sass variables are simple: you assign a value to a name that begins with $, and then you can refer to that name instead of the value itself",
      "category": "doc"
    },
    {
      "id": 18,
      "name": "interpolation",
      "title": "Interpolation",
      "description": "Interpolation can be used almost anywhere in a Sass stylesheet to embed the result of a SassScript expression into a chunk of CSS. Just wrap an expression in #{}",
      "category": "doc"
    },
    {
      "id": 19,
      "name": "at-rules",
      "title": "At-Rules",
      "description": "Much of Sass’s extra functionality comes in the form of new at-rules it adds on top of CSS",
      "category": "doc"
    },
    {
      "id": 20,
      "name": "values",
      "title": "Values",
      "description": "Sass supports a number of value types, most of which come straight from CSS. Every expression produces a value, variables hold values. Most value types come straight from CSS",
      "category": "doc"
    },
    {
      "id": 21,
      "name": "operators",
      "title": "Operators",
      "description": "Sass supports a handful of useful operators for working with different values. These include the standard mathematical operators like + and *, as well as operators for various other types",
      "category": "doc"
    },
    {
      "id": 22,
      "name": "built-in-modules",
      "title": "Built-In Modules",
      "description": "Sass provides many built-in modules which contain useful functions (and the occasional mixin)",
      "category": "doc"
    },
    {
      "id": 23,
      "name": "use",
      "title": "@use",
      "description": "The @use rule loads mixins, functions, and variables from other Sass stylesheets, and combines CSS from multiple stylesheets together. Stylesheets loaded by @use are called 'modules'",
      "category": "doc"
    }
  ]
}
